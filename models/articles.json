{
    "db": [{
            "title": "Web-разработка сегодня",
            "data": "10 мая 2017",
            "body": [
                "Мою голову периодически посещает ряд вопросов: Почему меня привлекает веб-разработка?  Что меня цепляет в этой сфере? Почему я считаю ее важной? Правда я никогда не задавал себе эти вопросы напрямую, поэтому в этой статье хотел бы расставить все точки над i без лишнего мыла.",
                "За последние годы я понял в себе некоторую особенность: мне нравится развиваться в понимании механики восприятия окружающего. Мне нравится думать о том, почему люди обращают внимание на те или иные вещи. Думаю это характерно не только для меня, но я для себя в этом интересе поставил галочку. Считаю этот срез обмена информацией в обществе на данный момент является ключевым в развитии как моей личной свободы, так и свободы всего общества, его гибкости. Если лет 30 назад акцент в развитии социума стоял на создании инфраструктуры физического выживания вида, развивалось инженерное дело, врачебная практика, экономика, и т.д., то на данный момент фундамент для выживания построен, в данном цикле социального развития общество сместило акцент на развитие глубины коммуникации. Развивается способность людей доносить мысли друг другу, из поколения в поколение. От живого общения к книгам, от книг к телевидению, от телевидения к интернету увеличивалась информационная проводимость, улучшалось качество передаваемой информация.",
                " Вся IT-индустрия развивает информационные потоки, это развитие с каждым годом становится все более актуальным. Информация - самый ценный ресурс на сегодня и люди, владеющие информацией, способные управлять ее потоками в глобальной сети будут увеличивать свою востребованность с каждым годом.",
                " Стираются границы, изменяются подходы, создаются новые миры, и в этом новом мире IT-специалисты - это художники с практически неограниченными творческими возможностями. Думаю эти возможности в творческой реализации меня привлекли и будут привлекать еще очень долго."
            ]
        },
        {
            "title": "Шаблонизатор Pug и новый взгляд на верстку",
            "data": "3 июня 2017",
            "body": [
                "Некоторое время назад, когда я только начинал изучать html, я и представить себе не мог те неудобства, которые возникают при поддержке кода, к примеру при необходимости скорректировать однотипные элементы на странице или на разных страницах многостраничного сайта. Начав изучение шаблонизатора Pug, опробовав его возможности я ускорил написание когда и во многом облегчил себе жизнь. Так вышло благодаря возможностям, информацией о работе с которыми я хотел бы поделиться.",
                "Первое, о чем бы хотелось сказать, это о возможности pug`а наследовать шаблоны и включать блоки при помощи команд 'extends'  и 'include' соответственно. Наследование шаблона позволяет оформить основные элементы страницы - макет сайта и включать его в каждую страницу многостраничного сайта, не переписывая одинаковые элементы каждый раз. Включение же блоков позволяет вставлять повторяющиеся элементы, такие как футер или шапка сайта в нужные места страницы, прописав все элементы один раз в отдельном файле. Все это позволяет сократить время на изменение одинакового содержимого на различных страницах.",
                "Для того, чтобы сделать создание шаблонов более гибким в Pug есть возможность создавать переменные, которые можно изменять для каждой страницы. Отличным примером может служить тег Title, который для каждой страницы свой, однако он присутствует в шаблоне, наследуемом этими страницами. Чтобы изменить этот тег, в шаблоне нужно обозначить его содержимое как переменную и в каждой странице присвоить этой переменной свое значение.",
                "Создание переменных не единственная возможность pug, доступная из Javascript. Pug может выполнять скрипты на этом языке, для этого нужно лишь поставить '-' перед кодом. Это открывает различные возможности, такие, например, как циклы или условия.",
                "Основной особенностью Pug, отличающей его от многих других шаблонизаторов, является упрощенный синтаксис, в котором не нужны закрывающиеся теги. Вместо них вложенный элемент определяется смещением табуляцией вправо относительно родительского элемента верхней строки. Такой подход уменьшает количество кода, делает вложенность визуально более различимой и изменяемой. Для изменения вложенности достаточно выделить необходимый фрагмент и клавишей Tab или сочетанием Shift+Tab сместить вложенность вправо или влево соответственно.",
                "Все эти возможности сделали для меня верстку более удобной и окончательно убедили в переходе к шаблонному написанию pug-кода от классического html."
            ]
        },
        {
            "title": "Избавление от рутины с Sass",
            "data": "11 июня 2017",
            "body": [
                "Вроде бы так топорно  просто написать селектор, стилизовать, написать еще селектор стилизовать снова, потом еще и еще. На 30 селекторе оборачиваешься назад и радуешься проделанной работе. Проделывая эти действия не в первый раз, рано или поздно, приходит в голову вопрос 'Как все это упростить?' и тут на помощь приходит препроцессор Sass.","Мое знакомство с этим препроцессором началось во время прохождения обучения на курсах по веб-программированию в Loftschool, и через некоторое время я был приятно удивлен возможностями, которые им предоставляются. Об этих возможностях вкратце я хотел бы рассказать в этой статье.","Переменные в sass - это контейнеры информации о стилях, которые можно хранить и использовать во всем проекте. Это дает огромные преимущества. Стоит определить в начале sass файла, например, цвета, используемые на сайте, и эти переменные можно будет использовать везде. А если необходимо будет изменить один из основных цветов, то можно будет изменить его в одном месте, в переменной, и этот цвет измениться на всем сайте.","Вложенности в sass позволяют помещать внутрь описания селектора селекторы, зависимые от главного, что при компиляции будет аналогично записи типа '.probe .probe-list', это делает файл стилей более воспринимаемым и легким в обслуживании.","Фрагментирование позволяет выделять отдельные по смыслу участки стилизации в отдельные файлы,а директива @import может подключить в исполняемом файле все эти фрагменты. Это упрощает жизнь разработчиков, делает код более модульным, понятным, легким в обслуживании. Например, если мне нужно стилизовать шапку сайта, все стили этого блока я могу вынести в файл _header.scss, что в будущем сократит мне время поиска нужных селекторов.","Миксины или примеси служат для сокращения написания кода. Это аналог функции в javascript, стоит написать один раз алгоритм действий и его можно использовать во всем проекте. Например можно создать примесь медиазапроса, которая будет активировать определенные стили под определенный медиазапрос, или примесь, которая будет выравнивать по центру экрана элемент. Все эти описания стилей можно прописать один раз в примеси, вызывая ее командой @include где угодно.","Наследование возможность sass, позволяющая копировать прописанные в каком-либо селекторе стили и использовать их в новых директивой @extends. Это сокращает время написания кода, уменьшает количество кода и делает его легким в обслуживании.","Математические вычисления позволяют использовать в sass стандартные математические операторы, что в рамка написания стилей может быть очень полезно."
            ]
        }
    ]
}